name: CI/CD to Google Compute Engine

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy to GCE
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCE_INSTANCE: instance-20240529-070416
      GCE_INSTANCE_ZONE: asia-east1-b  # 直接設置區域

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: python -m unittest discover tests

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure gcloud Auth
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' | base64 -d > /tmp/sa_key.json
        cat /tmp/sa_key.json  # 顯示文件内容以進行調試
        gcloud auth activate-service-account --key-file=/tmp/sa_key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: Verify and set GCE instance zone
      run: |
        ZONE=$(gcloud compute instances list --filter="name=${{ env.GCE_INSTANCE }}" --format="get(zone)")
        if [ -z "$ZONE" ]; then
          echo "Error: Could not find zone for instance ${{ env.GCE_INSTANCE }}"
          exit 1
        fi
        echo "GCE_INSTANCE_ZONE=$ZONE" >> $GITHUB_ENV
        echo "Instance zone: $ZONE"

    - name: Deploy to Compute Engine
      run: |
        # Create temporary directory
        gcloud compute ssh --zone=${{ env.GCE_INSTANCE_ZONE }} ${{ env.GCE_INSTANCE }} --command="mkdir -p /tmp/telegram-bot-temp"
        
        # Copy files
        gcloud compute scp --recurse --zone=${{ env.GCE_INSTANCE_ZONE }} ./* ${{ env.GCE_INSTANCE }}:/tmp/telegram-bot-temp
        
        # Run deployment commands
        gcloud compute ssh --zone=${{ env.GCE_INSTANCE_ZONE }} ${{ env.GCE_INSTANCE }} --command="
          set -e
          echo 'Starting deployment process...'
          
          # Remove old directory and move new files
          sudo rm -rf /home/cruz/telegram-bot
          sudo mv /tmp/telegram-bot-temp /home/cruz/telegram-bot
          
          # Set correct permissions
          sudo chown -R cruz:cruz /home/cruz/telegram-bot
          sudo chmod -R 755 /home/cruz/telegram-bot
          
          # Check if Dockerfile exists
          if [ ! -f /home/cruz/telegram-bot/Dockerfile ]; then
            echo 'Error: Dockerfile not found'
            exit 1
          fi
          
          # Build Docker image
          cd /home/cruz/telegram-bot
          if sudo -u cruz docker build -t telegram-bot .; then
            echo 'Docker image built successfully as cruz user'
          else
            echo 'Building Docker image as root...'
            sudo docker build -t telegram-bot .
          fi
          
          # Stop and remove old container
          sudo docker stop telegram-bot-container || true
          sudo docker rm -f telegram-bot-container || true
          
          # Run new container
          if sudo -u cruz docker run -d --name telegram-bot-container \
            -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
            -e GOOGLE_SPREADSHEET_ID=${{ secrets.GOOGLE_SPREADSHEET_ID }} \
            --restart unless-stopped \
            telegram-bot; then
            echo 'Container started successfully as cruz user'
          else
            echo 'Starting container as root...'
            sudo docker run -d --name telegram-bot-container \
              -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
              -e GOOGLE_SPREADSHEET_ID=${{ secrets.GOOGLE_SPREADSHEET_ID }} \
              --restart unless-stopped \
              telegram-bot
          fi
          
          echo 'Deployment completed successfully'
        "
    - name: Debug
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Dockerfile contents:"
        cat Dockerfile